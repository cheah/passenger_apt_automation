#!/bin/bash
set -e

BASE_DIR=`dirname "$0"`
BASE_DIR=`cd "$BASE_DIR"; pwd`

GIT_URL="$1"
REPO_DIR="$2"
APT_DIR="$3"
REF=${4:-origin/master}
DEFAULT_NAMESPACE=`basename "$REPO_DIR" | sed -E 's/\..*?$//'`
NAMESPACE=${DEFAULT_NAMESPACE:-default}
source configuration
source library
export WORK_DIR="/var/cache/passenger_apt_automation/$NAMESPACE"
export PKG_DIR="$WORK_DIR/pkg"
export PBUILDFOLDER="$WORK_DIR/pbuilder"

if [[ "$GIT_URL" = "" || "$REPO_DIR" = "" || "$APT_DIR" = "" ]]; then
	echo "Usage: ./new_release GIT_URL REPO_DIR APT_DIR [REF]"
	exit 1
fi

(
	set -x

	echo "# Initializing..."
	rm -rf "$WORK_DIR"
	mkdir -p "$WORK_DIR"
	mkdir -p "$PKG_DIR"
	mkdir -p "$PBUILDFOLDER"
	echo $$ > "$WORK_DIR/pid"
	ln -s ~/pbuilder/*.tgz "$PBUILDFOLDER"/
	unset USE_CCACHE
	trap "stage Error error" ERR

	if [[ -e "$REPO_DIR" ]]; then
		stage "Updating repository..." updating_repo
		cd "$REPO_DIR"
		if [[ "`git config remote.origin.url`" != "$GIT_URL" ]]; then
			echo "Git repository URL does not match!"
			exit 1
		fi
		git fetch
		rm -rf *
	else
		stage "Cloning repository..."
		git clone "$GIT_URL" "$REPO_DIR"
		cd "$REPO_DIR"
	fi
	git reset --hard "$REF"

	stage "Building Phusion Passenger source packages..." building_passenger_source_packages
	drake debian:source_packages

	stage "Building Phusion Passenger binary packages..." building_passenger_binary_packages
	drake debian:binary_packages -j$CONCURRENCY_LEVEL

	stage "Building Nginx source packages..." building_nginx_source_packages
	cd "$BASE_DIR"
	export PASSENGER_DIR="$REPO_DIR"
	./create_nginx_package source_packages
	stage "Building Nginx binary packages..." building_nginx_binary_packages
	./create_nginx_package binary_packages -j$CONCURRENCY_LEVEL

	stage "Signing packages..." signing_packages
	cd "$BASE_DIR"
	export PATH="$BASE_DIR/dummygpg:$PATH"
	debsign -k$SIGNING_KEY $PKG_DIR/nginx*.changes
	debsign -k$SIGNING_KEY $PKG_DIR/official/*.changes
	debsign -k$SIGNING_KEY $PBUILDFOLDER/*_result/*.changes

	stage "Importing packages into APT repository..." importing_packages
	rm -rf "$APT_DIR.tmp" "$APT_DIR.old"
	cp -dpR "$APT_DIR" "$APT_DIR.tmp"
	cd "$APT_DIR.tmp"
	for DIST in $DEBIAN_DISTROS; do
		for ARCH in $DEBIAN_ARCHS; do
			if [[ $ARCH == amd64 ]]; then
				pbase_name="$DIST"
			else
				pbase_name="$DIST-$ARCH"
			fi
			result_dir="$PBUILDFOLDER/${pbase_name}_result"
			reprepro --keepunusednewfiles --keepunreferencedfiles -Vb . includedeb $DIST $result_dir/*_$ARCH.deb
		done
		reprepro --keepunusednewfiles --keepunreferencedfiles -Vb . includedeb $DIST $PBUILDFOLDER/${DIST}_result/*_all.deb
		for F in $PBUILDFOLDER/${DIST}_result/*.dsc; do
			reprepro --keepunusednewfiles --keepunreferencedfiles -Vb . includedsc $DIST $F
		done
	done
	./sign_repo "`pwd`"
	cd ..
	mv "$APT_DIR" "$APT_DIR.old"
	mv "$APT_DIR.tmp" "$APT_DIR"
	rm -rf "$APT_DIR.old"

	stage "Done" done
) 2>&1 | awk '{ print strftime("%Y-%m-%d %H:%M:%S -- "), $0; fflush(); }' | tee "$WORK_DIR/full.log"
