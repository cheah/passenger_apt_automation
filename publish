#!/bin/bash
set -e

SELFDIR=`dirname "$0"`
SELFDIR=`cd "$SELFDIR" && pwd`
source "$SELFDIR/internal/lib/library.sh"

OUTPUT_DIR=
PACKAGE_CLOUD_TOKEN_FILE=
REPOSITORY=
LOG_DIR=
SELFDIR_ON_DOCKER_HOST=
YANK=false
CONCURRENCY=8
SHOW_BACKTRACES=false
SHOW_TASKS=false
ARGV=

function usage()
{
	echo "./publish [OPTIONS] <TASK NAMES...>"
	echo "Publish built Debian packages to PackageCloud."
	echo
	echo "Required options:"
	echo "  -d DIR     Path (on Docker host) in which build products are stored"
	echo "  -c PATH    Path (on Docker host) to PackageCloud token file"
	echo "  -r NAME    Repository name, e.g. passenger-testing"
	echo
	echo "Docker host path fixup options (optional):"
	echo "  -S DIR     Path on Docker host to passenger_apt_automation on Docker host"
	echo
	echo "Other optional options:"
	echo "  -l DIR     Write logs to the given directory (on Docker host)"
	echo "  -j NUM     Set concurrency. Default: 8"
	echo "  -y         Yank old packages"
	echo "  -t         Show backtraces on error"
	echo
	echo "  -T         Show all tasks"
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local ORIG_ARGV
	local opt
	while getopts "d:c:r:S:D:C:l:j:ytTh" opt; do
		case "$opt" in
		d)
			OUTPUT_DIR="$OPTARG"
			;;
		c)
			PACKAGE_CLOUD_TOKEN_FILE="$OPTARG"
			;;
		r)
			REPOSITORY="$OPTARG"
			;;
		S)
			SELFDIR_ON_DOCKER_HOST="$OPTARG"
			;;
		l)
			LOG_DIR="$OPTARG"
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		y)
			YANK=true
			;;
		t)
			SHOW_BACKTRACES=true
			;;
		T)
			SHOW_TASKS=true
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	(( OPTIND -= 1 )) || true
	shift $OPTIND || true
	ORIG_ARGV=("$@")

	if [[ ${#ORIG_ARGV[@]} = 0 ]]; then
		SHOW_TASKS=true
	else
		ARGV=("${ORIG_ARGV[@]}" finish)
		if $SHOW_BACKTRACES; then
			ARGV+=(--trace)
		fi
	fi

	if [[ "$OUTPUT_DIR" = "" ]]; then
		echo "ERROR: please specify a build products directory with -d."
		exit 1
	fi
	if ! $SHOW_TASKS; then
		if [[ "$PACKAGE_CLOUD_TOKEN_FILE" = "" ]]; then
			echo "ERROR: please specify a PackageCloud token file with -c."
			exit 1
		fi
		if [[ "$REPOSITORY" = "" ]]; then
			echo "ERROR: please specify a repository name with -r."
			exit 1
		fi
	fi
}

parse_options "$@"
EXTRA_MOUNTS=()
if [[ "$LOG_DIR" != "" ]]; then
	EXTRA_MOUNTS+=(-v "$LOG_DIR:/work")
	run mkdir -p "$LOG_DIR"
fi

SELFDIR_ON_DOCKER_HOST="${SELFDIR_ON_DOCKER_HOST:-$SELFDIR}"

if $SHOW_TASKS; then
	exec docker run \
		--rm \
		-v "$SELFDIR_ON_DOCKER_HOST/internal:/system/internal:ro" \
		-v "$OUTPUT_DIR:/output:ro" \
		-e "APP_UID=`/usr/bin/id -u`" \
		-e "APP_GID=`/usr/bin/id -g`" \
		-e "SHOW_TASKS=true" \
		-e "LC_CTYPE=C.UTF-8" \
		phusion/passenger_apt_automation_buildbox \
		/sbin/my_init --quiet --skip-runit --skip-startup-files -- \
		/system/internal/scripts/inituidgid.sh \
		/system/internal/publish/preinit.sh \
		/sbin/setuser app \
		drake -f /system/internal/publish/Rakefile -T --trace
else
	echo "-------- Entering Docker container --------"
	exec docker run \
		--rm \
		-v "$SELFDIR_ON_DOCKER_HOST/internal:/system/internal:ro" \
		-v "$OUTPUT_DIR:/output:ro" \
		-v "$PACKAGE_CLOUD_TOKEN_FILE:/package_cloud_token.txt:ro" \
		"${EXTRA_MOUNTS[@]}" \
		-e "REPOSITORY=$REPOSITORY" \
		-e "YANK=$YANK" \
		-e "APP_UID=`/usr/bin/id -u`" \
		-e "APP_GID=`/usr/bin/id -g`" \
		-e "LC_CTYPE=C.UTF-8" \
		phusion/passenger_apt_automation_buildbox \
		/sbin/my_init --quiet --skip-runit --skip-startup-files -- \
		/system/internal/scripts/inituidgid.sh \
		/system/internal/publish/preinit.sh \
		/sbin/setuser app \
		drake -f /system/internal/publish/Rakefile -j $CONCURRENCY "${ARGV[@]}"
fi
