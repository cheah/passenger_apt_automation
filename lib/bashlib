if [[ "$BASE_DIR" = "" ]]; then
	BASE_DIR=`dirname "$0"`
	BASE_DIR=`cd "$BASE_DIR" && pwd`
fi
cd "$BASE_DIR"

function _cleanup()
{
	set +e
	local pids=`jobs -p`
	if [[ "$pids" != "" ]]; then
		kill $pids
	fi
	if type cleanup 2>/dev/null | grep -q function; then
		cleanup
	fi
}

function load_general_config()
{
	if [[ ! -e config/general ]]; then
		echo "The configuration file config/general does not exist. Please run ./setup-system first!"
		exit 1
	fi
	source config/general
}

function use_dummy_gpg()
{
	if [[ ! -e config/passphrase ]]; then
		echo "You have not yet configured a passphrase for the GPG signing key. Please run ./setup-system first!"
		exit 1
	fi
	export PATH="$BASE_DIR/lib/dummygpg:$PATH"
}

function require_running_as_psg_apt_automation_user()
{
	if [[ `whoami` != psg_apt_automation ]]; then
		echo "This command must be run as psg_apt_automation. Please try:"
		echo "sudo -u psg_apt_automation -H $0"
		exit 1
	fi

	# Prevent pbuilder-dist from complaining about sudo.
	unset SUDO_COMMAND
	unset SUDO_USER
	unset SUDO_UID
	unset SUDO_GID
}

function validate_project_name()
{
	local PROJECT_NAME="$1"
	if [[ "$PROJECT_NAME" != passenger && "$PROJECT_NAME" != passenger-enterprise && \
	      "$PROJECT_NAME" != passenger-testing && "$PROJECT_NAME" != passenger-enterprise-testing ]]; then
		echo "Error: the PROJECT_NAME parameter must be one of: 'passenger'," \
			"'passenger-enterprise', 'passenger-testing', 'passenger-enterprise-testing'"
		exit 1
	fi
}

function reset_fake_pbuild_folder()
{
	local pbuildfolder="$1"
	(
		shopt -s dotglob
		mkdir -p ~/pbuilder/aptcache
		mkdir -p "$pbuildfolder"
		rm -rf "$pbuildfolder"/*.tgz
		rm -rf "$pbuildfolder"/*_result
		ln -s ~/pbuilder/aptcache ~/pbuilder/*.tgz "$pbuildfolder"/
	)
}

function header()
{
	echo
	echo "----- $@ -----"
}

function run()
{
	echo "# $@"
	"$@"
}

function stage()
{
	local display="$1"
	local name="$2"
	echo "####### Stage: $display ($name) #######"
	if [[ "$WORK_DIR" != "" ]]; then
		echo "`date` -- $name" >> "$WORK_DIR/stage"
	fi
}

trap _cleanup EXIT
